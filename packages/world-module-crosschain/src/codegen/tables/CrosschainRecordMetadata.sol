// SPDX-License-Identifier: MIT
pragma solidity >=0.8.24;

/* Autogenerated file. Do not edit manually. */

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema } from "@latticexyz/store/src/Schema.sol";
import { EncodedLengths, EncodedLengthsLib } from "@latticexyz/store/src/EncodedLengths.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";

struct CrosschainRecordMetadataData {
  uint256 blockNumber;
  uint256 logIndex;
  uint256 timestamp;
  uint256 chainId;
}

library CrosschainRecordMetadata {
  // Hex below is the result of `WorldResourceIdLib.encode({ namespace: "root", name: "CrosschainRecord", typeId: RESOURCE_TABLE });`
  ResourceId constant _tableId = ResourceId.wrap(0x7462726f6f740000000000000000000043726f7373636861696e5265636f7264);

  FieldLayout constant _fieldLayout =
    FieldLayout.wrap(0x0080040020202020000000000000000000000000000000000000000000000000);

  // Hex-encoded key schema of (bytes32)
  Schema constant _keySchema = Schema.wrap(0x002001005f000000000000000000000000000000000000000000000000000000);
  // Hex-encoded value schema of (uint256, uint256, uint256, uint256)
  Schema constant _valueSchema = Schema.wrap(0x008004001f1f1f1f000000000000000000000000000000000000000000000000);

  /**
   * @notice Get the table's key field names.
   * @return keyNames An array of strings with the names of key fields.
   */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "recordId";
  }

  /**
   * @notice Get the table's value field names.
   * @return fieldNames An array of strings with the names of value fields.
   */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](4);
    fieldNames[0] = "blockNumber";
    fieldNames[1] = "logIndex";
    fieldNames[2] = "timestamp";
    fieldNames[3] = "chainId";
  }

  /**
   * @notice Register the table with its config.
   */
  function register() internal {
    StoreSwitch.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Register the table with its config.
   */
  function _register() internal {
    StoreCore.registerTable(_tableId, _fieldLayout, _keySchema, _valueSchema, getKeyNames(), getFieldNames());
  }

  /**
   * @notice Get blockNumber.
   */
  function getBlockNumber(bytes32 recordId) internal view returns (uint256 blockNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get blockNumber.
   */
  function _getBlockNumber(bytes32 recordId) internal view returns (uint256 blockNumber) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 0, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set blockNumber.
   */
  function setBlockNumber(bytes32 recordId, uint256 blockNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((blockNumber)), _fieldLayout);
  }

  /**
   * @notice Set blockNumber.
   */
  function _setBlockNumber(bytes32 recordId, uint256 blockNumber) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreCore.setStaticField(_tableId, _keyTuple, 0, abi.encodePacked((blockNumber)), _fieldLayout);
  }

  /**
   * @notice Get logIndex.
   */
  function getLogIndex(bytes32 recordId) internal view returns (uint256 logIndex) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get logIndex.
   */
  function _getLogIndex(bytes32 recordId) internal view returns (uint256 logIndex) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 1, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set logIndex.
   */
  function setLogIndex(bytes32 recordId, uint256 logIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((logIndex)), _fieldLayout);
  }

  /**
   * @notice Set logIndex.
   */
  function _setLogIndex(bytes32 recordId, uint256 logIndex) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreCore.setStaticField(_tableId, _keyTuple, 1, abi.encodePacked((logIndex)), _fieldLayout);
  }

  /**
   * @notice Get timestamp.
   */
  function getTimestamp(bytes32 recordId) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get timestamp.
   */
  function _getTimestamp(bytes32 recordId) internal view returns (uint256 timestamp) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 2, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set timestamp.
   */
  function setTimestamp(bytes32 recordId, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Set timestamp.
   */
  function _setTimestamp(bytes32 recordId, uint256 timestamp) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreCore.setStaticField(_tableId, _keyTuple, 2, abi.encodePacked((timestamp)), _fieldLayout);
  }

  /**
   * @notice Get chainId.
   */
  function getChainId(bytes32 recordId) internal view returns (uint256 chainId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreSwitch.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Get chainId.
   */
  function _getChainId(bytes32 recordId) internal view returns (uint256 chainId) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    bytes32 _blob = StoreCore.getStaticField(_tableId, _keyTuple, 3, _fieldLayout);
    return (uint256(bytes32(_blob)));
  }

  /**
   * @notice Set chainId.
   */
  function setChainId(bytes32 recordId, uint256 chainId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreSwitch.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((chainId)), _fieldLayout);
  }

  /**
   * @notice Set chainId.
   */
  function _setChainId(bytes32 recordId, uint256 chainId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreCore.setStaticField(_tableId, _keyTuple, 3, abi.encodePacked((chainId)), _fieldLayout);
  }

  /**
   * @notice Get the full data.
   */
  function get(bytes32 recordId) internal view returns (CrosschainRecordMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreSwitch.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Get the full data.
   */
  function _get(bytes32 recordId) internal view returns (CrosschainRecordMetadataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    (bytes memory _staticData, EncodedLengths _encodedLengths, bytes memory _dynamicData) = StoreCore.getRecord(
      _tableId,
      _keyTuple,
      _fieldLayout
    );
    return decode(_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function set(bytes32 recordId, uint256 blockNumber, uint256 logIndex, uint256 timestamp, uint256 chainId) internal {
    bytes memory _staticData = encodeStatic(blockNumber, logIndex, timestamp, chainId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using individual values.
   */
  function _set(bytes32 recordId, uint256 blockNumber, uint256 logIndex, uint256 timestamp, uint256 chainId) internal {
    bytes memory _staticData = encodeStatic(blockNumber, logIndex, timestamp, chainId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function set(bytes32 recordId, CrosschainRecordMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.blockNumber, _table.logIndex, _table.timestamp, _table.chainId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreSwitch.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Set the full data using the data struct.
   */
  function _set(bytes32 recordId, CrosschainRecordMetadataData memory _table) internal {
    bytes memory _staticData = encodeStatic(_table.blockNumber, _table.logIndex, _table.timestamp, _table.chainId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreCore.setRecord(_tableId, _keyTuple, _staticData, _encodedLengths, _dynamicData, _fieldLayout);
  }

  /**
   * @notice Decode the tightly packed blob of static data using this table's field layout.
   */
  function decodeStatic(
    bytes memory _blob
  ) internal pure returns (uint256 blockNumber, uint256 logIndex, uint256 timestamp, uint256 chainId) {
    blockNumber = (uint256(Bytes.getBytes32(_blob, 0)));

    logIndex = (uint256(Bytes.getBytes32(_blob, 32)));

    timestamp = (uint256(Bytes.getBytes32(_blob, 64)));

    chainId = (uint256(Bytes.getBytes32(_blob, 96)));
  }

  /**
   * @notice Decode the tightly packed blobs using this table's field layout.
   * @param _staticData Tightly packed static fields.
   *
   *
   */
  function decode(
    bytes memory _staticData,
    EncodedLengths,
    bytes memory
  ) internal pure returns (CrosschainRecordMetadataData memory _table) {
    (_table.blockNumber, _table.logIndex, _table.timestamp, _table.chainId) = decodeStatic(_staticData);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function deleteRecord(bytes32 recordId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreSwitch.deleteRecord(_tableId, _keyTuple);
  }

  /**
   * @notice Delete all data for given keys.
   */
  function _deleteRecord(bytes32 recordId) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    StoreCore.deleteRecord(_tableId, _keyTuple, _fieldLayout);
  }

  /**
   * @notice Tightly pack static (fixed length) data using this table's schema.
   * @return The static data, encoded into a sequence of bytes.
   */
  function encodeStatic(
    uint256 blockNumber,
    uint256 logIndex,
    uint256 timestamp,
    uint256 chainId
  ) internal pure returns (bytes memory) {
    return abi.encodePacked(blockNumber, logIndex, timestamp, chainId);
  }

  /**
   * @notice Encode all of a record's fields.
   * @return The static (fixed length) data, encoded into a sequence of bytes.
   * @return The lengths of the dynamic fields (packed into a single bytes32 value).
   * @return The dynamic (variable length) data, encoded into a sequence of bytes.
   */
  function encode(
    uint256 blockNumber,
    uint256 logIndex,
    uint256 timestamp,
    uint256 chainId
  ) internal pure returns (bytes memory, EncodedLengths, bytes memory) {
    bytes memory _staticData = encodeStatic(blockNumber, logIndex, timestamp, chainId);

    EncodedLengths _encodedLengths;
    bytes memory _dynamicData;

    return (_staticData, _encodedLengths, _dynamicData);
  }

  /**
   * @notice Encode keys as a bytes32 array using this table's field layout.
   */
  function encodeKeyTuple(bytes32 recordId) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = recordId;

    return _keyTuple;
  }
}
